// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_
#define FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace webgrab {

struct DownloadRequest;
struct DownloadRequestBuilder;

struct DownloadResponse;
struct DownloadResponseBuilder;

struct DownloadStatusRequest;
struct DownloadStatusRequestBuilder;

struct DownloadStatusResponse;
struct DownloadStatusResponseBuilder;

struct DownloadAbortRequest;
struct DownloadAbortRequestBuilder;

struct ShutdownRequest;
struct ShutdownRequestBuilder;

struct GPIOConfigureRequest;
struct GPIOConfigureRequestBuilder;

struct GPIOSetRequest;
struct GPIOSetRequestBuilder;

struct GPIOGetRequest;
struct GPIOGetRequestBuilder;

struct GPIOStatusRequest;
struct GPIOStatusRequestBuilder;

struct GPIOConfigureResponse;
struct GPIOConfigureResponseBuilder;

struct GPIOSetResponse;
struct GPIOSetResponseBuilder;

struct GPIOGetResponse;
struct GPIOGetResponseBuilder;

struct GPIOStatusResponse;
struct GPIOStatusResponseBuilder;

struct GPIOPinStatus;
struct GPIOPinStatusBuilder;

struct MQTTMessage;
struct MQTTMessageBuilder;

struct ErrorResponse;
struct ErrorResponseBuilder;

struct Message;
struct MessageBuilder;

struct MQTTEnvelope;
struct MQTTEnvelopeBuilder;

enum Request : uint8_t {
  Request_NONE = 0,
  Request_DownloadRequest = 1,
  Request_DownloadStatusRequest = 2,
  Request_DownloadAbortRequest = 3,
  Request_ShutdownRequest = 4,
  Request_GPIOConfigureRequest = 5,
  Request_GPIOSetRequest = 6,
  Request_GPIOGetRequest = 7,
  Request_GPIOStatusRequest = 8,
  Request_MIN = Request_NONE,
  Request_MAX = Request_GPIOStatusRequest
};

inline const Request (&EnumValuesRequest())[9] {
  static const Request values[] = {
    Request_NONE,
    Request_DownloadRequest,
    Request_DownloadStatusRequest,
    Request_DownloadAbortRequest,
    Request_ShutdownRequest,
    Request_GPIOConfigureRequest,
    Request_GPIOSetRequest,
    Request_GPIOGetRequest,
    Request_GPIOStatusRequest
  };
  return values;
}

inline const char * const *EnumNamesRequest() {
  static const char * const names[10] = {
    "NONE",
    "DownloadRequest",
    "DownloadStatusRequest",
    "DownloadAbortRequest",
    "ShutdownRequest",
    "GPIOConfigureRequest",
    "GPIOSetRequest",
    "GPIOGetRequest",
    "GPIOStatusRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequest(Request e) {
  if (flatbuffers::IsOutRange(e, Request_NONE, Request_GPIOStatusRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequest()[index];
}

template<typename T> struct RequestTraits {
  static const Request enum_value = Request_NONE;
};

template<> struct RequestTraits<webgrab::DownloadRequest> {
  static const Request enum_value = Request_DownloadRequest;
};

template<> struct RequestTraits<webgrab::DownloadStatusRequest> {
  static const Request enum_value = Request_DownloadStatusRequest;
};

template<> struct RequestTraits<webgrab::DownloadAbortRequest> {
  static const Request enum_value = Request_DownloadAbortRequest;
};

template<> struct RequestTraits<webgrab::ShutdownRequest> {
  static const Request enum_value = Request_ShutdownRequest;
};

template<> struct RequestTraits<webgrab::GPIOConfigureRequest> {
  static const Request enum_value = Request_GPIOConfigureRequest;
};

template<> struct RequestTraits<webgrab::GPIOSetRequest> {
  static const Request enum_value = Request_GPIOSetRequest;
};

template<> struct RequestTraits<webgrab::GPIOGetRequest> {
  static const Request enum_value = Request_GPIOGetRequest;
};

template<> struct RequestTraits<webgrab::GPIOStatusRequest> {
  static const Request enum_value = Request_GPIOStatusRequest;
};

bool VerifyRequest(flatbuffers::Verifier &verifier, const void *obj, Request type);
bool VerifyRequestVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum Response : uint8_t {
  Response_NONE = 0,
  Response_DownloadResponse = 1,
  Response_DownloadStatusResponse = 2,
  Response_ErrorResponse = 3,
  Response_GPIOConfigureResponse = 4,
  Response_GPIOSetResponse = 5,
  Response_GPIOGetResponse = 6,
  Response_GPIOStatusResponse = 7,
  Response_MIN = Response_NONE,
  Response_MAX = Response_GPIOStatusResponse
};

inline const Response (&EnumValuesResponse())[8] {
  static const Response values[] = {
    Response_NONE,
    Response_DownloadResponse,
    Response_DownloadStatusResponse,
    Response_ErrorResponse,
    Response_GPIOConfigureResponse,
    Response_GPIOSetResponse,
    Response_GPIOGetResponse,
    Response_GPIOStatusResponse
  };
  return values;
}

inline const char * const *EnumNamesResponse() {
  static const char * const names[9] = {
    "NONE",
    "DownloadResponse",
    "DownloadStatusResponse",
    "ErrorResponse",
    "GPIOConfigureResponse",
    "GPIOSetResponse",
    "GPIOGetResponse",
    "GPIOStatusResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponse(Response e) {
  if (flatbuffers::IsOutRange(e, Response_NONE, Response_GPIOStatusResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponse()[index];
}

template<typename T> struct ResponseTraits {
  static const Response enum_value = Response_NONE;
};

template<> struct ResponseTraits<webgrab::DownloadResponse> {
  static const Response enum_value = Response_DownloadResponse;
};

template<> struct ResponseTraits<webgrab::DownloadStatusResponse> {
  static const Response enum_value = Response_DownloadStatusResponse;
};

template<> struct ResponseTraits<webgrab::ErrorResponse> {
  static const Response enum_value = Response_ErrorResponse;
};

template<> struct ResponseTraits<webgrab::GPIOConfigureResponse> {
  static const Response enum_value = Response_GPIOConfigureResponse;
};

template<> struct ResponseTraits<webgrab::GPIOSetResponse> {
  static const Response enum_value = Response_GPIOSetResponse;
};

template<> struct ResponseTraits<webgrab::GPIOGetResponse> {
  static const Response enum_value = Response_GPIOGetResponse;
};

template<> struct ResponseTraits<webgrab::GPIOStatusResponse> {
  static const Response enum_value = Response_GPIOStatusResponse;
};

bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type);
bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct DownloadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URL = 4
  };
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  flatbuffers::String *mutable_url() {
    return GetPointer<flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
};

struct DownloadRequestBuilder {
  typedef DownloadRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(DownloadRequest::VT_URL, url);
  }
  explicit DownloadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadRequest> CreateDownloadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  DownloadRequestBuilder builder_(_fbb);
  builder_.add_url(url);
  return builder_.Finish();
}

inline flatbuffers::Offset<DownloadRequest> CreateDownloadRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return webgrab::CreateDownloadRequest(
      _fbb,
      url__);
}

struct DownloadResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool mutate_sessionId(uint32_t _sessionId = 0) {
    return SetField<uint32_t>(VT_SESSIONID, _sessionId, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadResponseBuilder {
  typedef DownloadResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadResponse::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadResponse> CreateDownloadResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadResponseBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct DownloadStatusRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadStatusRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool mutate_sessionId(uint32_t _sessionId = 0) {
    return SetField<uint32_t>(VT_SESSIONID, _sessionId, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadStatusRequestBuilder {
  typedef DownloadStatusRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadStatusRequest::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadStatusRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadStatusRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadStatusRequest> CreateDownloadStatusRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadStatusRequestBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct DownloadStatusResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadStatusResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  const flatbuffers::String *status() const {
    return GetPointer<const flatbuffers::String *>(VT_STATUS);
  }
  flatbuffers::String *mutable_status() {
    return GetPointer<flatbuffers::String *>(VT_STATUS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           verifier.EndTable();
  }
};

struct DownloadStatusResponseBuilder {
  typedef DownloadStatusResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(flatbuffers::Offset<flatbuffers::String> status) {
    fbb_.AddOffset(DownloadStatusResponse::VT_STATUS, status);
  }
  explicit DownloadStatusResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadStatusResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadStatusResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadStatusResponse> CreateDownloadStatusResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> status = 0) {
  DownloadStatusResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<DownloadStatusResponse> CreateDownloadStatusResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *status = nullptr) {
  auto status__ = status ? _fbb.CreateString(status) : 0;
  return webgrab::CreateDownloadStatusResponse(
      _fbb,
      status__);
}

struct DownloadAbortRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadAbortRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool mutate_sessionId(uint32_t _sessionId = 0) {
    return SetField<uint32_t>(VT_SESSIONID, _sessionId, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadAbortRequestBuilder {
  typedef DownloadAbortRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadAbortRequest::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadAbortRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadAbortRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadAbortRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadAbortRequest> CreateDownloadAbortRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadAbortRequestBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct ShutdownRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShutdownRequestBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ShutdownRequestBuilder {
  typedef ShutdownRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ShutdownRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ShutdownRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShutdownRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShutdownRequest> CreateShutdownRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ShutdownRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GPIOConfigureRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOConfigureRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_DIRECTION = 6
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  const flatbuffers::String *direction() const {
    return GetPointer<const flatbuffers::String *>(VT_DIRECTION);
  }
  flatbuffers::String *mutable_direction() {
    return GetPointer<flatbuffers::String *>(VT_DIRECTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyString(direction()) &&
           verifier.EndTable();
  }
};

struct GPIOConfigureRequestBuilder {
  typedef GPIOConfigureRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOConfigureRequest::VT_PIN, pin, 0);
  }
  void add_direction(flatbuffers::Offset<flatbuffers::String> direction) {
    fbb_.AddOffset(GPIOConfigureRequest::VT_DIRECTION, direction);
  }
  explicit GPIOConfigureRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOConfigureRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOConfigureRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOConfigureRequest> CreateGPIOConfigureRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    flatbuffers::Offset<flatbuffers::String> direction = 0) {
  GPIOConfigureRequestBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pin(pin);
  return builder_.Finish();
}

inline flatbuffers::Offset<GPIOConfigureRequest> CreateGPIOConfigureRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    const char *direction = nullptr) {
  auto direction__ = direction ? _fbb.CreateString(direction) : 0;
  return webgrab::CreateGPIOConfigureRequest(
      _fbb,
      pin,
      direction__);
}

struct GPIOSetRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOSetRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_VALUE = 6
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value = 0) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct GPIOSetRequestBuilder {
  typedef GPIOSetRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOSetRequest::VT_PIN, pin, 0);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(GPIOSetRequest::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit GPIOSetRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOSetRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOSetRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOSetRequest> CreateGPIOSetRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    bool value = false) {
  GPIOSetRequestBuilder builder_(_fbb);
  builder_.add_pin(pin);
  builder_.add_value(value);
  return builder_.Finish();
}

struct GPIOGetRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOGetRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           verifier.EndTable();
  }
};

struct GPIOGetRequestBuilder {
  typedef GPIOGetRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOGetRequest::VT_PIN, pin, 0);
  }
  explicit GPIOGetRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOGetRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOGetRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOGetRequest> CreateGPIOGetRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0) {
  GPIOGetRequestBuilder builder_(_fbb);
  builder_.add_pin(pin);
  return builder_.Finish();
}

struct GPIOStatusRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOStatusRequestBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct GPIOStatusRequestBuilder {
  typedef GPIOStatusRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit GPIOStatusRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOStatusRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOStatusRequest> CreateGPIOStatusRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  GPIOStatusRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct GPIOConfigureResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOConfigureResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_SUCCESS = 6
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool mutate_success(bool _success = 0) {
    return SetField<uint8_t>(VT_SUCCESS, static_cast<uint8_t>(_success), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct GPIOConfigureResponseBuilder {
  typedef GPIOConfigureResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOConfigureResponse::VT_PIN, pin, 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(GPIOConfigureResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit GPIOConfigureResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOConfigureResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOConfigureResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOConfigureResponse> CreateGPIOConfigureResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    bool success = false) {
  GPIOConfigureResponseBuilder builder_(_fbb);
  builder_.add_pin(pin);
  builder_.add_success(success);
  return builder_.Finish();
}

struct GPIOSetResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOSetResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_SUCCESS = 6
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool mutate_success(bool _success = 0) {
    return SetField<uint8_t>(VT_SUCCESS, static_cast<uint8_t>(_success), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct GPIOSetResponseBuilder {
  typedef GPIOSetResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOSetResponse::VT_PIN, pin, 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(GPIOSetResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit GPIOSetResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOSetResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOSetResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOSetResponse> CreateGPIOSetResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    bool success = false) {
  GPIOSetResponseBuilder builder_(_fbb);
  builder_.add_pin(pin);
  builder_.add_success(success);
  return builder_.Finish();
}

struct GPIOGetResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOGetResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_VALUE = 6,
    VT_SUCCESS = 8
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value = 0) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  bool mutate_success(bool _success = 0) {
    return SetField<uint8_t>(VT_SUCCESS, static_cast<uint8_t>(_success), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           verifier.EndTable();
  }
};

struct GPIOGetResponseBuilder {
  typedef GPIOGetResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOGetResponse::VT_PIN, pin, 0);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(GPIOGetResponse::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(GPIOGetResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  explicit GPIOGetResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOGetResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOGetResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOGetResponse> CreateGPIOGetResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    bool value = false,
    bool success = false) {
  GPIOGetResponseBuilder builder_(_fbb);
  builder_.add_pin(pin);
  builder_.add_success(success);
  builder_.add_value(value);
  return builder_.Finish();
}

struct GPIOStatusResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOStatusResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PINS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>> *pins() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>> *>(VT_PINS);
  }
  flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>> *mutable_pins() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>> *>(VT_PINS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PINS) &&
           verifier.VerifyVector(pins()) &&
           verifier.VerifyVectorOfTables(pins()) &&
           verifier.EndTable();
  }
};

struct GPIOStatusResponseBuilder {
  typedef GPIOStatusResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pins(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>>> pins) {
    fbb_.AddOffset(GPIOStatusResponse::VT_PINS, pins);
  }
  explicit GPIOStatusResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOStatusResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOStatusResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOStatusResponse> CreateGPIOStatusResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<webgrab::GPIOPinStatus>>> pins = 0) {
  GPIOStatusResponseBuilder builder_(_fbb);
  builder_.add_pins(pins);
  return builder_.Finish();
}

inline flatbuffers::Offset<GPIOStatusResponse> CreateGPIOStatusResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<webgrab::GPIOPinStatus>> *pins = nullptr) {
  auto pins__ = pins ? _fbb.CreateVector<flatbuffers::Offset<webgrab::GPIOPinStatus>>(*pins) : 0;
  return webgrab::CreateGPIOStatusResponse(
      _fbb,
      pins__);
}

struct GPIOPinStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GPIOPinStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PIN = 4,
    VT_DIRECTION = 6,
    VT_VALUE = 8
  };
  int32_t pin() const {
    return GetField<int32_t>(VT_PIN, 0);
  }
  bool mutate_pin(int32_t _pin = 0) {
    return SetField<int32_t>(VT_PIN, _pin, 0);
  }
  const flatbuffers::String *direction() const {
    return GetPointer<const flatbuffers::String *>(VT_DIRECTION);
  }
  flatbuffers::String *mutable_direction() {
    return GetPointer<flatbuffers::String *>(VT_DIRECTION);
  }
  bool value() const {
    return GetField<uint8_t>(VT_VALUE, 0) != 0;
  }
  bool mutate_value(bool _value = 0) {
    return SetField<uint8_t>(VT_VALUE, static_cast<uint8_t>(_value), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_PIN, 4) &&
           VerifyOffset(verifier, VT_DIRECTION) &&
           verifier.VerifyString(direction()) &&
           VerifyField<uint8_t>(verifier, VT_VALUE, 1) &&
           verifier.EndTable();
  }
};

struct GPIOPinStatusBuilder {
  typedef GPIOPinStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pin(int32_t pin) {
    fbb_.AddElement<int32_t>(GPIOPinStatus::VT_PIN, pin, 0);
  }
  void add_direction(flatbuffers::Offset<flatbuffers::String> direction) {
    fbb_.AddOffset(GPIOPinStatus::VT_DIRECTION, direction);
  }
  void add_value(bool value) {
    fbb_.AddElement<uint8_t>(GPIOPinStatus::VT_VALUE, static_cast<uint8_t>(value), 0);
  }
  explicit GPIOPinStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GPIOPinStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GPIOPinStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<GPIOPinStatus> CreateGPIOPinStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    flatbuffers::Offset<flatbuffers::String> direction = 0,
    bool value = false) {
  GPIOPinStatusBuilder builder_(_fbb);
  builder_.add_direction(direction);
  builder_.add_pin(pin);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<GPIOPinStatus> CreateGPIOPinStatusDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t pin = 0,
    const char *direction = nullptr,
    bool value = false) {
  auto direction__ = direction ? _fbb.CreateString(direction) : 0;
  return webgrab::CreateGPIOPinStatus(
      _fbb,
      pin,
      direction__,
      value);
}

struct MQTTMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MQTTMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOPIC = 4,
    VT_PAYLOAD = 6,
    VT_QOS = 8,
    VT_RETAIN = 10
  };
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  flatbuffers::String *mutable_topic() {
    return GetPointer<flatbuffers::String *>(VT_TOPIC);
  }
  const flatbuffers::String *payload() const {
    return GetPointer<const flatbuffers::String *>(VT_PAYLOAD);
  }
  flatbuffers::String *mutable_payload() {
    return GetPointer<flatbuffers::String *>(VT_PAYLOAD);
  }
  int32_t qos() const {
    return GetField<int32_t>(VT_QOS, 0);
  }
  bool mutate_qos(int32_t _qos = 0) {
    return SetField<int32_t>(VT_QOS, _qos, 0);
  }
  bool retain() const {
    return GetField<uint8_t>(VT_RETAIN, 0) != 0;
  }
  bool mutate_retain(bool _retain = 0) {
    return SetField<uint8_t>(VT_RETAIN, static_cast<uint8_t>(_retain), 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           VerifyField<int32_t>(verifier, VT_QOS, 4) &&
           VerifyField<uint8_t>(verifier, VT_RETAIN, 1) &&
           verifier.EndTable();
  }
};

struct MQTTMessageBuilder {
  typedef MQTTMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(MQTTMessage::VT_TOPIC, topic);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::String> payload) {
    fbb_.AddOffset(MQTTMessage::VT_PAYLOAD, payload);
  }
  void add_qos(int32_t qos) {
    fbb_.AddElement<int32_t>(MQTTMessage::VT_QOS, qos, 0);
  }
  void add_retain(bool retain) {
    fbb_.AddElement<uint8_t>(MQTTMessage::VT_RETAIN, static_cast<uint8_t>(retain), 0);
  }
  explicit MQTTMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MQTTMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MQTTMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<MQTTMessage> CreateMQTTMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    flatbuffers::Offset<flatbuffers::String> payload = 0,
    int32_t qos = 0,
    bool retain = false) {
  MQTTMessageBuilder builder_(_fbb);
  builder_.add_qos(qos);
  builder_.add_payload(payload);
  builder_.add_topic(topic);
  builder_.add_retain(retain);
  return builder_.Finish();
}

inline flatbuffers::Offset<MQTTMessage> CreateMQTTMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *topic = nullptr,
    const char *payload = nullptr,
    int32_t qos = 0,
    bool retain = false) {
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return webgrab::CreateMQTTMessage(
      _fbb,
      topic__,
      payload__,
      qos,
      retain);
}

struct ErrorResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ErrorResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  const flatbuffers::String *error() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR);
  }
  flatbuffers::String *mutable_error() {
    return GetPointer<flatbuffers::String *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyString(error()) &&
           verifier.EndTable();
  }
};

struct ErrorResponseBuilder {
  typedef ErrorResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(flatbuffers::Offset<flatbuffers::String> error) {
    fbb_.AddOffset(ErrorResponse::VT_ERROR, error);
  }
  explicit ErrorResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ErrorResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ErrorResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ErrorResponse> CreateErrorResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> error = 0) {
  ErrorResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

inline flatbuffers::Offset<ErrorResponse> CreateErrorResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *error = nullptr) {
  auto error__ = error ? _fbb.CreateString(error) : 0;
  return webgrab::CreateErrorResponse(
      _fbb,
      error__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6,
    VT_RESPONSE_TYPE = 8,
    VT_RESPONSE = 10
  };
  webgrab::Request request_type() const {
    return static_cast<webgrab::Request>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  template<typename T> const T *request_as() const;
  const webgrab::DownloadRequest *request_as_DownloadRequest() const {
    return request_type() == webgrab::Request_DownloadRequest ? static_cast<const webgrab::DownloadRequest *>(request()) : nullptr;
  }
  const webgrab::DownloadStatusRequest *request_as_DownloadStatusRequest() const {
    return request_type() == webgrab::Request_DownloadStatusRequest ? static_cast<const webgrab::DownloadStatusRequest *>(request()) : nullptr;
  }
  const webgrab::DownloadAbortRequest *request_as_DownloadAbortRequest() const {
    return request_type() == webgrab::Request_DownloadAbortRequest ? static_cast<const webgrab::DownloadAbortRequest *>(request()) : nullptr;
  }
  const webgrab::ShutdownRequest *request_as_ShutdownRequest() const {
    return request_type() == webgrab::Request_ShutdownRequest ? static_cast<const webgrab::ShutdownRequest *>(request()) : nullptr;
  }
  const webgrab::GPIOConfigureRequest *request_as_GPIOConfigureRequest() const {
    return request_type() == webgrab::Request_GPIOConfigureRequest ? static_cast<const webgrab::GPIOConfigureRequest *>(request()) : nullptr;
  }
  const webgrab::GPIOSetRequest *request_as_GPIOSetRequest() const {
    return request_type() == webgrab::Request_GPIOSetRequest ? static_cast<const webgrab::GPIOSetRequest *>(request()) : nullptr;
  }
  const webgrab::GPIOGetRequest *request_as_GPIOGetRequest() const {
    return request_type() == webgrab::Request_GPIOGetRequest ? static_cast<const webgrab::GPIOGetRequest *>(request()) : nullptr;
  }
  const webgrab::GPIOStatusRequest *request_as_GPIOStatusRequest() const {
    return request_type() == webgrab::Request_GPIOStatusRequest ? static_cast<const webgrab::GPIOStatusRequest *>(request()) : nullptr;
  }
  void *mutable_request() {
    return GetPointer<void *>(VT_REQUEST);
  }
  webgrab::Response response_type() const {
    return static_cast<webgrab::Response>(GetField<uint8_t>(VT_RESPONSE_TYPE, 0));
  }
  const void *response() const {
    return GetPointer<const void *>(VT_RESPONSE);
  }
  template<typename T> const T *response_as() const;
  const webgrab::DownloadResponse *response_as_DownloadResponse() const {
    return response_type() == webgrab::Response_DownloadResponse ? static_cast<const webgrab::DownloadResponse *>(response()) : nullptr;
  }
  const webgrab::DownloadStatusResponse *response_as_DownloadStatusResponse() const {
    return response_type() == webgrab::Response_DownloadStatusResponse ? static_cast<const webgrab::DownloadStatusResponse *>(response()) : nullptr;
  }
  const webgrab::ErrorResponse *response_as_ErrorResponse() const {
    return response_type() == webgrab::Response_ErrorResponse ? static_cast<const webgrab::ErrorResponse *>(response()) : nullptr;
  }
  const webgrab::GPIOConfigureResponse *response_as_GPIOConfigureResponse() const {
    return response_type() == webgrab::Response_GPIOConfigureResponse ? static_cast<const webgrab::GPIOConfigureResponse *>(response()) : nullptr;
  }
  const webgrab::GPIOSetResponse *response_as_GPIOSetResponse() const {
    return response_type() == webgrab::Response_GPIOSetResponse ? static_cast<const webgrab::GPIOSetResponse *>(response()) : nullptr;
  }
  const webgrab::GPIOGetResponse *response_as_GPIOGetResponse() const {
    return response_type() == webgrab::Response_GPIOGetResponse ? static_cast<const webgrab::GPIOGetResponse *>(response()) : nullptr;
  }
  const webgrab::GPIOStatusResponse *response_as_GPIOStatusResponse() const {
    return response_type() == webgrab::Response_GPIOStatusResponse ? static_cast<const webgrab::GPIOStatusResponse *>(response()) : nullptr;
  }
  void *mutable_response() {
    return GetPointer<void *>(VT_RESPONSE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE, 1) &&
           VerifyOffset(verifier, VT_REQUEST) &&
           VerifyRequest(verifier, request(), request_type()) &&
           VerifyField<uint8_t>(verifier, VT_RESPONSE_TYPE, 1) &&
           VerifyOffset(verifier, VT_RESPONSE) &&
           VerifyResponse(verifier, response(), response_type()) &&
           verifier.EndTable();
  }
};

template<> inline const webgrab::DownloadRequest *Message::request_as<webgrab::DownloadRequest>() const {
  return request_as_DownloadRequest();
}

template<> inline const webgrab::DownloadStatusRequest *Message::request_as<webgrab::DownloadStatusRequest>() const {
  return request_as_DownloadStatusRequest();
}

template<> inline const webgrab::DownloadAbortRequest *Message::request_as<webgrab::DownloadAbortRequest>() const {
  return request_as_DownloadAbortRequest();
}

template<> inline const webgrab::ShutdownRequest *Message::request_as<webgrab::ShutdownRequest>() const {
  return request_as_ShutdownRequest();
}

template<> inline const webgrab::GPIOConfigureRequest *Message::request_as<webgrab::GPIOConfigureRequest>() const {
  return request_as_GPIOConfigureRequest();
}

template<> inline const webgrab::GPIOSetRequest *Message::request_as<webgrab::GPIOSetRequest>() const {
  return request_as_GPIOSetRequest();
}

template<> inline const webgrab::GPIOGetRequest *Message::request_as<webgrab::GPIOGetRequest>() const {
  return request_as_GPIOGetRequest();
}

template<> inline const webgrab::GPIOStatusRequest *Message::request_as<webgrab::GPIOStatusRequest>() const {
  return request_as_GPIOStatusRequest();
}

template<> inline const webgrab::DownloadResponse *Message::response_as<webgrab::DownloadResponse>() const {
  return response_as_DownloadResponse();
}

template<> inline const webgrab::DownloadStatusResponse *Message::response_as<webgrab::DownloadStatusResponse>() const {
  return response_as_DownloadStatusResponse();
}

template<> inline const webgrab::ErrorResponse *Message::response_as<webgrab::ErrorResponse>() const {
  return response_as_ErrorResponse();
}

template<> inline const webgrab::GPIOConfigureResponse *Message::response_as<webgrab::GPIOConfigureResponse>() const {
  return response_as_GPIOConfigureResponse();
}

template<> inline const webgrab::GPIOSetResponse *Message::response_as<webgrab::GPIOSetResponse>() const {
  return response_as_GPIOSetResponse();
}

template<> inline const webgrab::GPIOGetResponse *Message::response_as<webgrab::GPIOGetResponse>() const {
  return response_as_GPIOGetResponse();
}

template<> inline const webgrab::GPIOStatusResponse *Message::response_as<webgrab::GPIOStatusResponse>() const {
  return response_as_GPIOStatusResponse();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(webgrab::Request request_type) {
    fbb_.AddElement<uint8_t>(Message::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Message::VT_REQUEST, request);
  }
  void add_response_type(webgrab::Response response_type) {
    fbb_.AddElement<uint8_t>(Message::VT_RESPONSE_TYPE, static_cast<uint8_t>(response_type), 0);
  }
  void add_response(flatbuffers::Offset<void> response) {
    fbb_.AddOffset(Message::VT_RESPONSE, response);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    webgrab::Request request_type = webgrab::Request_NONE,
    flatbuffers::Offset<void> request = 0,
    webgrab::Response response_type = webgrab::Response_NONE,
    flatbuffers::Offset<void> response = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_response(response);
  builder_.add_request(request);
  builder_.add_response_type(response_type);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

struct MQTTEnvelope FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MQTTEnvelopeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_ID = 4,
    VT_TIMESTAMP = 6,
    VT_SOURCE = 8,
    VT_TARGET = 10,
    VT_PAYLOAD = 12
  };
  const flatbuffers::String *message_id() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE_ID);
  }
  flatbuffers::String *mutable_message_id() {
    return GetPointer<flatbuffers::String *>(VT_MESSAGE_ID);
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp = 0) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  flatbuffers::String *mutable_source() {
    return GetPointer<flatbuffers::String *>(VT_SOURCE);
  }
  const flatbuffers::String *target() const {
    return GetPointer<const flatbuffers::String *>(VT_TARGET);
  }
  flatbuffers::String *mutable_target() {
    return GetPointer<flatbuffers::String *>(VT_TARGET);
  }
  const webgrab::Message *payload() const {
    return GetPointer<const webgrab::Message *>(VT_PAYLOAD);
  }
  webgrab::Message *mutable_payload() {
    return GetPointer<webgrab::Message *>(VT_PAYLOAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGE_ID) &&
           verifier.VerifyString(message_id()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.VerifyString(target()) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyTable(payload()) &&
           verifier.EndTable();
  }
};

struct MQTTEnvelopeBuilder {
  typedef MQTTEnvelope Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_id(flatbuffers::Offset<flatbuffers::String> message_id) {
    fbb_.AddOffset(MQTTEnvelope::VT_MESSAGE_ID, message_id);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(MQTTEnvelope::VT_TIMESTAMP, timestamp, 0);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(MQTTEnvelope::VT_SOURCE, source);
  }
  void add_target(flatbuffers::Offset<flatbuffers::String> target) {
    fbb_.AddOffset(MQTTEnvelope::VT_TARGET, target);
  }
  void add_payload(flatbuffers::Offset<webgrab::Message> payload) {
    fbb_.AddOffset(MQTTEnvelope::VT_PAYLOAD, payload);
  }
  explicit MQTTEnvelopeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MQTTEnvelope> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MQTTEnvelope>(end);
    return o;
  }
};

inline flatbuffers::Offset<MQTTEnvelope> CreateMQTTEnvelope(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message_id = 0,
    uint64_t timestamp = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    flatbuffers::Offset<flatbuffers::String> target = 0,
    flatbuffers::Offset<webgrab::Message> payload = 0) {
  MQTTEnvelopeBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_payload(payload);
  builder_.add_target(target);
  builder_.add_source(source);
  builder_.add_message_id(message_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<MQTTEnvelope> CreateMQTTEnvelopeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message_id = nullptr,
    uint64_t timestamp = 0,
    const char *source = nullptr,
    const char *target = nullptr,
    flatbuffers::Offset<webgrab::Message> payload = 0) {
  auto message_id__ = message_id ? _fbb.CreateString(message_id) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto target__ = target ? _fbb.CreateString(target) : 0;
  return webgrab::CreateMQTTEnvelope(
      _fbb,
      message_id__,
      timestamp,
      source__,
      target__,
      payload);
}

inline bool VerifyRequest(flatbuffers::Verifier &verifier, const void *obj, Request type) {
  switch (type) {
    case Request_NONE: {
      return true;
    }
    case Request_DownloadRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_DownloadStatusRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadStatusRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_DownloadAbortRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadAbortRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_ShutdownRequest: {
      auto ptr = reinterpret_cast<const webgrab::ShutdownRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_GPIOConfigureRequest: {
      auto ptr = reinterpret_cast<const webgrab::GPIOConfigureRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_GPIOSetRequest: {
      auto ptr = reinterpret_cast<const webgrab::GPIOSetRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_GPIOGetRequest: {
      auto ptr = reinterpret_cast<const webgrab::GPIOGetRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_GPIOStatusRequest: {
      auto ptr = reinterpret_cast<const webgrab::GPIOStatusRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequest(
        verifier,  values->Get(i), types->GetEnum<Request>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type) {
  switch (type) {
    case Response_NONE: {
      return true;
    }
    case Response_DownloadResponse: {
      auto ptr = reinterpret_cast<const webgrab::DownloadResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_DownloadStatusResponse: {
      auto ptr = reinterpret_cast<const webgrab::DownloadStatusResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_ErrorResponse: {
      auto ptr = reinterpret_cast<const webgrab::ErrorResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_GPIOConfigureResponse: {
      auto ptr = reinterpret_cast<const webgrab::GPIOConfigureResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_GPIOSetResponse: {
      auto ptr = reinterpret_cast<const webgrab::GPIOSetResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_GPIOGetResponse: {
      auto ptr = reinterpret_cast<const webgrab::GPIOGetResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_GPIOStatusResponse: {
      auto ptr = reinterpret_cast<const webgrab::GPIOStatusResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponse(
        verifier,  values->Get(i), types->GetEnum<Response>(i))) {
      return false;
    }
  }
  return true;
}

inline const webgrab::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<webgrab::Message>(buf);
}

inline const webgrab::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<webgrab::Message>(buf);
}

inline Message *GetMutableMessage(void *buf) {
  return flatbuffers::GetMutableRoot<Message>(buf);
}

inline webgrab::Message *GetMutableSizePrefixedMessage(void *buf) {
  return flatbuffers::GetMutableSizePrefixedRoot<webgrab::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<webgrab::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<webgrab::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<webgrab::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<webgrab::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace webgrab

#endif  // FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_

## 2. Assignment B – WebGrab Server (multithreaded service)

Program in C++20 a multithreaded service "webgrab-server", which listens on a TCP socket, receives binary messages in `webgrab.fbs` format and puts them into a persistent **task queue** (can be file-based, SQLite or external MQ).

Worker threads (2-4) read from the queue and process tasks:

* DownloadRequest   → download file to disk (libcurl or wget) and store sessionId→status map.

* DownloadStatusRequest → return current status (Queued, Downloading, Completed, Failed, Aborted).

* DownloadAbortRequest  → cancellation flag; running download must terminate as soon as possible.

* ShutdownRequest   → accept, but process **only when** the queue reaches empty state; then terminate gracefully.

### Functional Requirements

1. **Asynchronous** processing: message reception must be acknowledged to the client immediately, actual work happens in the background.

2. The queue must survive process restart; unfinished jobs are re-queued on start.

3. Each job has a unique `sessionId` (uint32).

4. State data and files need to be stored in a separate working directory, specified as a parameter on launch.

5. Limits: at most 4 parallel downloads; others wait in queue.

### Provided Artifacts

* Same `webgrab.fbs` as the client.

* Build script `CMakeLists.txt`.

* README with deployment instructions and example `systemd` service file.

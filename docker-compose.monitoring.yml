version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: ai-servis-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
    ports:
      - "9090:9090"
    volumes:
      - ./containers/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./containers/prometheus/rules:/etc/prometheus/rules
      - ./volumes/prometheus-data:/prometheus
    networks:
      - ai-servis-monitoring
      - ai-servis-dev-network
    depends_on:
      - node-exporter
      - cadvisor

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:10.2.2
    container_name: ai-servis-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    ports:
      - "3000:3000"
    volumes:
      - ./containers/grafana/provisioning:/etc/grafana/provisioning
      - ./containers/grafana/dashboards:/var/lib/grafana/dashboards
      - ./volumes/grafana-data:/var/lib/grafana
    networks:
      - ai-servis-monitoring
    depends_on:
      - prometheus

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ai-servis-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - ai-servis-monitoring

  # cAdvisor - Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: ai-servis-cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ai-servis-monitoring

  # AlertManager - Alert Management
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ai-servis-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
    ports:
      - "9093:9093"
    volumes:
      - ./containers/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - ./volumes/alertmanager-data:/alertmanager
    networks:
      - ai-servis-monitoring

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:2.9.2
    container_name: ai-servis-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - ./containers/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - ./volumes/loki-data:/loki
    networks:
      - ai-servis-monitoring

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:2.9.2
    container_name: ai-servis-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./containers/promtail/promtail-config.yml:/etc/promtail/config.yml
      - ./logs:/var/log/ai-servis:ro
      - /var/log:/var/log/host:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - ai-servis-monitoring
    depends_on:
      - loki

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51.0
    container_name: ai-servis-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # Jaeger UI
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
      - "9411:9411"   # Zipkin
    volumes:
      - ./volumes/jaeger-data:/badger
    networks:
      - ai-servis-monitoring

  # MQTT Exporter - MQTT Metrics
  mqtt-exporter:
    build:
      context: ./containers/mqtt-exporter
      dockerfile: Dockerfile
    container_name: ai-servis-mqtt-exporter
    restart: unless-stopped
    environment:
      - MQTT_BROKER=mqtt-broker:1883
      - MQTT_TOPICS=ai-servis/+/+,esp32/+/+,hardware/+/+
      - PROMETHEUS_PORT=9234
    ports:
      - "9234:9234"
    networks:
      - ai-servis-monitoring
      - ai-servis-dev-network
    depends_on:
      - prometheus

  # Blackbox Exporter - Endpoint Monitoring
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: ai-servis-blackbox-exporter
    restart: unless-stopped
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    ports:
      - "9115:9115"
    volumes:
      - ./containers/blackbox-exporter/config.yml:/etc/blackbox_exporter/config.yml
    networks:
      - ai-servis-monitoring
      - ai-servis-dev-network

  # Elasticsearch - Log Storage (Alternative to Loki)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-servis-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - ai-servis-monitoring
    profiles:
      - elk

  # Kibana - Log Visualization (Alternative to Grafana for logs)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-servis-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    networks:
      - ai-servis-monitoring
    depends_on:
      - elasticsearch
    profiles:
      - elk

  # Logstash - Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ai-servis-logstash
    restart: unless-stopped
    volumes:
      - ./containers/logstash/pipeline:/usr/share/logstash/pipeline
      - ./containers/logstash/config:/usr/share/logstash/config
      - ./logs:/var/log/ai-servis:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    networks:
      - ai-servis-monitoring
    depends_on:
      - elasticsearch
    profiles:
      - elk

  # Uptime Kuma - Service Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1.23.11
    container_name: ai-servis-uptime-kuma
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ./volumes/uptime-kuma-data:/app/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ai-servis-monitoring
      - ai-servis-dev-network

networks:
  ai-servis-monitoring:
    driver: bridge
  ai-servis-dev-network:
    external: true

volumes:
  prometheus-data:
  grafana-data:
  alertmanager-data:
  loki-data:
  jaeger-data:
  elasticsearch-data:
  uptime-kuma-data:

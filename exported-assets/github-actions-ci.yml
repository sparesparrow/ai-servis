name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install pytest pytest-cov black flake8 mypy safety bandit

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type checking with mypy
      run: |
        mypy modules/ --ignore-missing-imports || true

    - name: Security check with bandit
      run: |
        bandit -r modules/ -f json -o bandit-report.json || true

    - name: Dependency security check with safety
      run: |
        safety check || true

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        MQTT_BROKER: localhost:1883
      run: |
        pytest tests/ -v --cov=modules --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-images:
    needs: lint-and-test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [
          'core-orchestrator',
          'ai-audio-assistant',
          'ai-platform-controllers/linux',
          'service-discovery'
        ]
        platform: [linux/amd64, linux/arm64]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./modules/${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-tests:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test environment
      run: |
        cp .env.example .env
        echo "ELEVENLABS_API_KEY=test-key" >> .env
        echo "SPOTIFY_CLIENT_ID=test-id" >> .env
        echo "SPOTIFY_CLIENT_SECRET=test-secret" >> .env

    - name: Start test services
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start

    - name: Check service health
      run: |
        ./scripts/health-check.sh

    - name: Run integration tests
      run: |
        docker-compose exec -T ai-servis-core python -m pytest tests/integration/ -v

    - name: Run system tests
      run: |
        ./scripts/system-tests.sh

    - name: Collect logs
      if: failure()
      run: |
        mkdir -p test-logs
        docker-compose logs > test-logs/docker-compose.log
        docker-compose logs ai-servis-core > test-logs/core.log
        docker-compose logs ai-audio-assistant > test-logs/audio.log

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: test-logs/

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  performance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start performance test environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.perf.yml up -d
        sleep 30

    - name: Run performance tests
      run: |
        ./scripts/performance-tests.sh

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [integration-tests, security-scan, performance-tests]
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # In a real implementation, you would deploy to your staging environment
        # This could involve updating Kubernetes deployments, AWS ECS services, etc.

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh staging

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [integration-tests, security-scan, performance-tests]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Production deployment logic here

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh production

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Send notifications (Slack, email, etc.)

  cleanup:
    if: always()
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest

    steps:
    - name: Cleanup test artifacts
      run: |
        echo "Cleaning up test artifacts..."
        # Cleanup logic here

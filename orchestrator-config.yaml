# MCP Build Orchestrator Configuration
# Advanced build and deployment automation

metadata:
  name: ai-servis-universal
  version: 1.0.0
  description: AI-SERVIS Universal Platform Build Configuration

# Global build settings
build_settings:
  parallel_jobs: 4
  cache_directory: ~/.conan2
  artifact_directory: ./artifacts
  log_level: INFO
  
# Conan profiles
profiles:
  linux-release:
    os: Linux
    arch: x86_64
    compiler: gcc
    compiler.version: 13
    compiler.libcxx: libstdc++11
    compiler.cppstd: 20
    build_type: Release
    
  linux-debug:
    os: Linux
    arch: x86_64
    compiler: gcc
    compiler.version: 13
    compiler.libcxx: libstdc++11
    compiler.cppstd: 20
    build_type: Debug
    
  raspberry-pi:
    os: Linux
    arch: armv8
    compiler: gcc
    compiler.version: 11
    compiler.libcxx: libstdc++11
    compiler.cppstd: 20
    build_type: Release

# Components to build
components:
  # MCP C++ Bridge - Core library
  - name: mcp-cpp-bridge
    path: ./mcp-cpp-bridge
    conan_file: ./mcp-cpp-bridge/conanfile.py
    profile: linux-release
    options:
      shared: false
      with_python: true
      with_grpc: true
      with_mqtt: true
      with_websocket: true
      enable_testing: true
    environment:
      CC: gcc-13
      CXX: g++-13
    test_command: ctest --output-on-failure
    deploy:
      type: library
      version: 1.0.0
      
  # Core Orchestrator
  - name: core-orchestrator
    path: ./modules/core-orchestrator
    dependencies:
      - mcp-cpp-bridge
    dockerfile: ./modules/core-orchestrator/Dockerfile
    environment:
      PYTHONPATH: /workspace/modules
    deploy:
      type: docker
      version: 1.0.0
      ports:
        - "8080:8080"
        - "9090:9090"
      env:
        MCP_MODE: orchestrator
        LOG_LEVEL: INFO
      tools:
        - name: orchestrate
          description: Orchestrate services
          schema:
            type: object
            properties:
              action:
                type: string
                enum: [start, stop, restart, status]
              service:
                type: string
                
  # Hardware Bridge (C++)
  - name: hardware-bridge
    path: ./platforms/cpp
    conan_file: ./platforms/cpp/conanfile.txt
    profile: linux-release
    dependencies:
      - mcp-cpp-bridge
    dockerfile: ./platforms/cpp/Dockerfile
    test_command: ./build/bin/hardware-server --test
    deploy:
      type: docker
      version: 1.0.0
      ports:
        - "5555:5555"
        - "1883:1883"
      env:
        MQTT_BROKER: mosquitto
        GPIO_MODE: simulation
      tools:
        - name: gpio_control
          description: Control GPIO pins
          schema:
            type: object
            properties:
              pin:
                type: integer
              action:
                type: string
                enum: [read, write, configure]
              value:
                type: boolean
                
  # Audio Assistant
  - name: ai-audio-assistant
    path: ./modules/ai-audio-assistant
    dependencies:
      - mcp-cpp-bridge
      - core-orchestrator
    dockerfile: ./modules/ai-audio-assistant/Dockerfile
    environment:
      AUDIO_BACKEND: pipewire
    deploy:
      type: docker
      version: 1.0.0
      ports:
        - "8081:8081"
      env:
        MCP_MODE: server
        AUDIO_QUALITY: high
      tools:
        - name: play_music
          description: Play music from various sources
          schema:
            type: object
            properties:
              source:
                type: string
                enum: [spotify, local, youtube]
              query:
                type: string
        - name: control_volume
          description: Control audio volume
          schema:
            type: object
            properties:
              zone:
                type: string
              level:
                type: integer
                minimum: 0
                maximum: 100
                
  # Platform Controllers
  - name: platform-controller-linux
    path: ./modules/ai-platform-controllers/linux
    dependencies:
      - mcp-cpp-bridge
    profile: linux-release
    deploy:
      type: systemd
      version: 1.0.0
      service_name: ai-servis-platform-linux
      
  # Security Module
  - name: ai-security
    path: ./modules/ai-security
    dependencies:
      - mcp-cpp-bridge
      - core-orchestrator
    dockerfile: ./modules/ai-security/Dockerfile
    environment:
      OPENCV_VERSION: 4.9.0
    deploy:
      type: docker
      version: 1.0.0
      ports:
        - "8082:8082"
      env:
        ENABLE_ANPR: true
        PRIVACY_MODE: strict
        
# Deployment configurations
deployment:
  strategies:
    production:
      type: kubernetes
      namespace: ai-servis
      replicas: 3
      resources:
        requests:
          memory: "512Mi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "2000m"
          
    development:
      type: docker-compose
      file: docker-compose.dev.yml
      
    edge:
      type: systemd
      target: raspberry-pi
      
# CI/CD Integration
cicd:
  triggers:
    - on: push
      branches: [main, develop]
      action: build
      
    - on: tag
      pattern: "v*"
      action: release
      
  pipelines:
    build:
      steps:
        - name: lint
          command: pre-commit run --all-files
        - name: build
          command: python build_orchestrator.py orchestrator-config.yaml --parallel
        - name: test
          command: pytest tests/
        - name: package
          command: conan create . --build=missing
          
    release:
      steps:
        - name: build
          command: python build_orchestrator.py orchestrator-config.yaml --parallel
        - name: push
          command: conan upload "*" -r=artifactory --all
        - name: deploy
          command: python build_orchestrator.py orchestrator-config.yaml --deploy
          
# Monitoring and observability
monitoring:
  metrics:
    enabled: true
    endpoint: http://prometheus:9090
    
  logging:
    level: INFO
    format: json
    outputs:
      - type: file
        path: /var/log/ai-servis/
      - type: elasticsearch
        url: http://elasticsearch:9200
        
  tracing:
    enabled: true
    endpoint: http://jaeger:14268
    
# Health checks
health_checks:
  - name: core-orchestrator
    endpoint: http://localhost:8080/health
    interval: 30s
    timeout: 5s
    
  - name: hardware-bridge
    endpoint: http://localhost:5555/health
    interval: 30s
    timeout: 5s
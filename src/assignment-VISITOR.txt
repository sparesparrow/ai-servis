## 1. Zadání A – WebGrab Client (konzolový nástroj)

Naprogramujte v C++20 konzolovou aplikaci „webgrab-client“, která plní roli front-endového **klienta** pro službu WebGrab.  

Po spuštění čte příkazový řádek, zadané příkazy převádí na binární zprávy podle přiloženého FlatBuffers schématu `webgrab.fbs` a odesílá je na TCP socket (host:port předané parametry CLI).  

Klient uchovává lokální **frontu odchozích požadavků** s možností:

* `download <url>` – zařadí nový DownloadRequest.  

* `status <session-id>` – zařadí DownloadStatusRequest.  

* `abort  <session-id>` – zařadí DownloadAbortRequest.  

* `quit` – odešle ShutdownRequest a ukončí aplikaci.

Po přijetí odpovědi (DownloadResponse, DownloadStatusResponse, …) klient vytiskne stručné hlášení na stdout.

### Funkční požadavky

1. Příkazy lze řetězit interaktivně; zadání ignoruje prázdné řádky a komentáře `#`.

2. Odesílání i příjem probíhá **synchronně** – klient čeká na odpověď dřív, než přijme další vstup.

3. Klient musí validovat syntaxi URL a číselných ID dřív, než vytvoří binární zprávu.

4. Protokol transportu: délkově prefiksovaný rámec (uint32 network-byte-order + payload).

5. Koncové kódy návratového procesu: 0 = OK, ≠0 = chyba připojení nebo nevalidní vstup.

### Dodané artefakty

* `webgrab.fbs` – již obsahuje definice:

  ```
  table DownloadRequest   { url:string; }
  table DownloadResponse  { sessionId:uint32; }
  table DownloadStatusRequest  { sessionId:uint32; }
  table DownloadStatusResponse { status:string; }
  table DownloadAbortRequest   { sessionId:uint32; }
  table ShutdownRequest { }
  ```

* Build skript `CMakeLists.txt`.

* README s ukázkou použití.
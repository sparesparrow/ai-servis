// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_
#define FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace webgrab {

struct DownloadRequest;
struct DownloadRequestBuilder;

struct DownloadResponse;
struct DownloadResponseBuilder;

struct DownloadStatusRequest;
struct DownloadStatusRequestBuilder;

struct DownloadStatusResponse;
struct DownloadStatusResponseBuilder;

struct DownloadAbortRequest;
struct DownloadAbortRequestBuilder;

struct ShutdownRequest;
struct ShutdownRequestBuilder;

struct ErrorResponse;
struct ErrorResponseBuilder;

struct Message;
struct MessageBuilder;

enum Request : uint8_t {
  Request_NONE = 0,
  Request_DownloadRequest = 1,
  Request_DownloadStatusRequest = 2,
  Request_DownloadAbortRequest = 3,
  Request_ShutdownRequest = 4,
  Request_MIN = Request_NONE,
  Request_MAX = Request_ShutdownRequest
};

inline const Request (&EnumValuesRequest())[5] {
  static const Request values[] = {
    Request_NONE,
    Request_DownloadRequest,
    Request_DownloadStatusRequest,
    Request_DownloadAbortRequest,
    Request_ShutdownRequest
  };
  return values;
}

inline const char * const *EnumNamesRequest() {
  static const char * const names[6] = {
    "NONE",
    "DownloadRequest",
    "DownloadStatusRequest",
    "DownloadAbortRequest",
    "ShutdownRequest",
    nullptr
  };
  return names;
}

inline const char *EnumNameRequest(Request e) {
  if (flatbuffers::IsOutRange(e, Request_NONE, Request_ShutdownRequest)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRequest()[index];
}

template<typename T> struct RequestTraits {
  static const Request enum_value = Request_NONE;
};

template<> struct RequestTraits<webgrab::DownloadRequest> {
  static const Request enum_value = Request_DownloadRequest;
};

template<> struct RequestTraits<webgrab::DownloadStatusRequest> {
  static const Request enum_value = Request_DownloadStatusRequest;
};

template<> struct RequestTraits<webgrab::DownloadAbortRequest> {
  static const Request enum_value = Request_DownloadAbortRequest;
};

template<> struct RequestTraits<webgrab::ShutdownRequest> {
  static const Request enum_value = Request_ShutdownRequest;
};

bool VerifyRequest(flatbuffers::Verifier &verifier, const void *obj, Request type);
bool VerifyRequestVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum Response : uint8_t {
  Response_NONE = 0,
  Response_DownloadResponse = 1,
  Response_DownloadStatusResponse = 2,
  Response_ErrorResponse = 3,
  Response_MIN = Response_NONE,
  Response_MAX = Response_ErrorResponse
};

inline const Response (&EnumValuesResponse())[4] {
  static const Response values[] = {
    Response_NONE,
    Response_DownloadResponse,
    Response_DownloadStatusResponse,
    Response_ErrorResponse
  };
  return values;
}

inline const char * const *EnumNamesResponse() {
  static const char * const names[5] = {
    "NONE",
    "DownloadResponse",
    "DownloadStatusResponse",
    "ErrorResponse",
    nullptr
  };
  return names;
}

inline const char *EnumNameResponse(Response e) {
  if (flatbuffers::IsOutRange(e, Response_NONE, Response_ErrorResponse)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesResponse()[index];
}

template<typename T> struct ResponseTraits {
  static const Response enum_value = Response_NONE;
};

template<> struct ResponseTraits<webgrab::DownloadResponse> {
  static const Response enum_value = Response_DownloadResponse;
};

template<> struct ResponseTraits<webgrab::DownloadStatusResponse> {
  static const Response enum_value = Response_DownloadStatusResponse;
};

template<> struct ResponseTraits<webgrab::ErrorResponse> {
  static const Response enum_value = Response_ErrorResponse;
};

bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type);
bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct DownloadRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URL = 4
  };
  const flatbuffers::String *url() const {
    return GetPointer<const flatbuffers::String *>(VT_URL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
};

struct DownloadRequestBuilder {
  typedef DownloadRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_url(flatbuffers::Offset<flatbuffers::String> url) {
    fbb_.AddOffset(DownloadRequest::VT_URL, url);
  }
  explicit DownloadRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadRequest> CreateDownloadRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> url = 0) {
  DownloadRequestBuilder builder_(_fbb);
  builder_.add_url(url);
  return builder_.Finish();
}

inline flatbuffers::Offset<DownloadRequest> CreateDownloadRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return webgrab::CreateDownloadRequest(
      _fbb,
      url__);
}

struct DownloadResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadResponseBuilder {
  typedef DownloadResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadResponse::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadResponse> CreateDownloadResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadResponseBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct DownloadStatusRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadStatusRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadStatusRequestBuilder {
  typedef DownloadStatusRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadStatusRequest::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadStatusRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadStatusRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadStatusRequest> CreateDownloadStatusRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadStatusRequestBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct DownloadStatusResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadStatusResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4
  };
  const flatbuffers::String *status() const {
    return GetPointer<const flatbuffers::String *>(VT_STATUS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           verifier.EndTable();
  }
};

struct DownloadStatusResponseBuilder {
  typedef DownloadStatusResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(flatbuffers::Offset<flatbuffers::String> status) {
    fbb_.AddOffset(DownloadStatusResponse::VT_STATUS, status);
  }
  explicit DownloadStatusResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadStatusResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadStatusResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadStatusResponse> CreateDownloadStatusResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> status = 0) {
  DownloadStatusResponseBuilder builder_(_fbb);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<DownloadStatusResponse> CreateDownloadStatusResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *status = nullptr) {
  auto status__ = status ? _fbb.CreateString(status) : 0;
  return webgrab::CreateDownloadStatusResponse(
      _fbb,
      status__);
}

struct DownloadAbortRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DownloadAbortRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SESSIONID = 4
  };
  uint32_t sessionId() const {
    return GetField<uint32_t>(VT_SESSIONID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SESSIONID, 4) &&
           verifier.EndTable();
  }
};

struct DownloadAbortRequestBuilder {
  typedef DownloadAbortRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sessionId(uint32_t sessionId) {
    fbb_.AddElement<uint32_t>(DownloadAbortRequest::VT_SESSIONID, sessionId, 0);
  }
  explicit DownloadAbortRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DownloadAbortRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DownloadAbortRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DownloadAbortRequest> CreateDownloadAbortRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t sessionId = 0) {
  DownloadAbortRequestBuilder builder_(_fbb);
  builder_.add_sessionId(sessionId);
  return builder_.Finish();
}

struct ShutdownRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ShutdownRequestBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct ShutdownRequestBuilder {
  typedef ShutdownRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit ShutdownRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ShutdownRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ShutdownRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ShutdownRequest> CreateShutdownRequest(
    flatbuffers::FlatBufferBuilder &_fbb) {
  ShutdownRequestBuilder builder_(_fbb);
  return builder_.Finish();
}

struct ErrorResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ErrorResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  const flatbuffers::String *error() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyString(error()) &&
           verifier.EndTable();
  }
};

struct ErrorResponseBuilder {
  typedef ErrorResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(flatbuffers::Offset<flatbuffers::String> error) {
    fbb_.AddOffset(ErrorResponse::VT_ERROR, error);
  }
  explicit ErrorResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ErrorResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ErrorResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<ErrorResponse> CreateErrorResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> error = 0) {
  ErrorResponseBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

inline flatbuffers::Offset<ErrorResponse> CreateErrorResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *error = nullptr) {
  auto error__ = error ? _fbb.CreateString(error) : 0;
  return webgrab::CreateErrorResponse(
      _fbb,
      error__);
}

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REQUEST_TYPE = 4,
    VT_REQUEST = 6,
    VT_RESPONSE_TYPE = 8,
    VT_RESPONSE = 10
  };
  webgrab::Request request_type() const {
    return static_cast<webgrab::Request>(GetField<uint8_t>(VT_REQUEST_TYPE, 0));
  }
  const void *request() const {
    return GetPointer<const void *>(VT_REQUEST);
  }
  template<typename T> const T *request_as() const;
  const webgrab::DownloadRequest *request_as_DownloadRequest() const {
    return request_type() == webgrab::Request_DownloadRequest ? static_cast<const webgrab::DownloadRequest *>(request()) : nullptr;
  }
  const webgrab::DownloadStatusRequest *request_as_DownloadStatusRequest() const {
    return request_type() == webgrab::Request_DownloadStatusRequest ? static_cast<const webgrab::DownloadStatusRequest *>(request()) : nullptr;
  }
  const webgrab::DownloadAbortRequest *request_as_DownloadAbortRequest() const {
    return request_type() == webgrab::Request_DownloadAbortRequest ? static_cast<const webgrab::DownloadAbortRequest *>(request()) : nullptr;
  }
  const webgrab::ShutdownRequest *request_as_ShutdownRequest() const {
    return request_type() == webgrab::Request_ShutdownRequest ? static_cast<const webgrab::ShutdownRequest *>(request()) : nullptr;
  }
  webgrab::Response response_type() const {
    return static_cast<webgrab::Response>(GetField<uint8_t>(VT_RESPONSE_TYPE, 0));
  }
  const void *response() const {
    return GetPointer<const void *>(VT_RESPONSE);
  }
  template<typename T> const T *response_as() const;
  const webgrab::DownloadResponse *response_as_DownloadResponse() const {
    return response_type() == webgrab::Response_DownloadResponse ? static_cast<const webgrab::DownloadResponse *>(response()) : nullptr;
  }
  const webgrab::DownloadStatusResponse *response_as_DownloadStatusResponse() const {
    return response_type() == webgrab::Response_DownloadStatusResponse ? static_cast<const webgrab::DownloadStatusResponse *>(response()) : nullptr;
  }
  const webgrab::ErrorResponse *response_as_ErrorResponse() const {
    return response_type() == webgrab::Response_ErrorResponse ? static_cast<const webgrab::ErrorResponse *>(response()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_REQUEST_TYPE, 1) &&
           VerifyOffset(verifier, VT_REQUEST) &&
           VerifyRequest(verifier, request(), request_type()) &&
           VerifyField<uint8_t>(verifier, VT_RESPONSE_TYPE, 1) &&
           VerifyOffset(verifier, VT_RESPONSE) &&
           VerifyResponse(verifier, response(), response_type()) &&
           verifier.EndTable();
  }
};

template<> inline const webgrab::DownloadRequest *Message::request_as<webgrab::DownloadRequest>() const {
  return request_as_DownloadRequest();
}

template<> inline const webgrab::DownloadStatusRequest *Message::request_as<webgrab::DownloadStatusRequest>() const {
  return request_as_DownloadStatusRequest();
}

template<> inline const webgrab::DownloadAbortRequest *Message::request_as<webgrab::DownloadAbortRequest>() const {
  return request_as_DownloadAbortRequest();
}

template<> inline const webgrab::ShutdownRequest *Message::request_as<webgrab::ShutdownRequest>() const {
  return request_as_ShutdownRequest();
}

template<> inline const webgrab::DownloadResponse *Message::response_as<webgrab::DownloadResponse>() const {
  return response_as_DownloadResponse();
}

template<> inline const webgrab::DownloadStatusResponse *Message::response_as<webgrab::DownloadStatusResponse>() const {
  return response_as_DownloadStatusResponse();
}

template<> inline const webgrab::ErrorResponse *Message::response_as<webgrab::ErrorResponse>() const {
  return response_as_ErrorResponse();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_request_type(webgrab::Request request_type) {
    fbb_.AddElement<uint8_t>(Message::VT_REQUEST_TYPE, static_cast<uint8_t>(request_type), 0);
  }
  void add_request(flatbuffers::Offset<void> request) {
    fbb_.AddOffset(Message::VT_REQUEST, request);
  }
  void add_response_type(webgrab::Response response_type) {
    fbb_.AddElement<uint8_t>(Message::VT_RESPONSE_TYPE, static_cast<uint8_t>(response_type), 0);
  }
  void add_response(flatbuffers::Offset<void> response) {
    fbb_.AddOffset(Message::VT_RESPONSE, response);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    webgrab::Request request_type = webgrab::Request_NONE,
    flatbuffers::Offset<void> request = 0,
    webgrab::Response response_type = webgrab::Response_NONE,
    flatbuffers::Offset<void> response = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_response(response);
  builder_.add_request(request);
  builder_.add_response_type(response_type);
  builder_.add_request_type(request_type);
  return builder_.Finish();
}

inline bool VerifyRequest(flatbuffers::Verifier &verifier, const void *obj, Request type) {
  switch (type) {
    case Request_NONE: {
      return true;
    }
    case Request_DownloadRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_DownloadStatusRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadStatusRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_DownloadAbortRequest: {
      auto ptr = reinterpret_cast<const webgrab::DownloadAbortRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Request_ShutdownRequest: {
      auto ptr = reinterpret_cast<const webgrab::ShutdownRequest *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyRequestVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyRequest(
        verifier,  values->Get(i), types->GetEnum<Request>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyResponse(flatbuffers::Verifier &verifier, const void *obj, Response type) {
  switch (type) {
    case Response_NONE: {
      return true;
    }
    case Response_DownloadResponse: {
      auto ptr = reinterpret_cast<const webgrab::DownloadResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_DownloadStatusResponse: {
      auto ptr = reinterpret_cast<const webgrab::DownloadStatusResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Response_ErrorResponse: {
      auto ptr = reinterpret_cast<const webgrab::ErrorResponse *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyResponseVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyResponse(
        verifier,  values->Get(i), types->GetEnum<Response>(i))) {
      return false;
    }
  }
  return true;
}

}  // namespace webgrab

#endif  // FLATBUFFERS_GENERATED_WEBGRAB_WEBGRAB_H_

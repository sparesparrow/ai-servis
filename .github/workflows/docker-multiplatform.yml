name: Multi-Platform Docker Build & Deploy

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Target platforms'
        required: true
        default: 'linux/amd64,linux/arm64'
        type: string
      push_images:
        description: 'Push images to registry'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # CORE ORCHESTRATOR MULTI-PLATFORM BUILD
  # =============================================================================
  build-core-orchestrator:
    name: Build Core Orchestrator (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.push_images || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/core-orchestrator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.platform }},enable={{is_default_branch}}
    
    - name: Build and push Core Orchestrator
      uses: docker/build-push-action@v5
      with:
        context: ./modules/core-orchestrator
        file: ./modules/core-orchestrator/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ inputs.push_images || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ matrix.platform }}
          TARGETPLATFORM=${{ matrix.platform }}
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # AI AUDIO ASSISTANT MULTI-PLATFORM BUILD
  # =============================================================================
  build-ai-audio-assistant:
    name: Build AI Audio Assistant (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.push_images || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-audio-assistant
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.platform }},enable={{is_default_branch}}
    
    - name: Build and push AI Audio Assistant
      uses: docker/build-push-action@v5
      with:
        context: ./modules/ai-audio-assistant
        file: ./modules/ai-audio-assistant/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ inputs.push_images || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ matrix.platform }}
          TARGETPLATFORM=${{ matrix.platform }}
          AUDIO_BACKEND=pipewire
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # HARDWARE BRIDGE MULTI-PLATFORM BUILD
  # =============================================================================
  build-hardware-bridge:
    name: Build Hardware Bridge (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.push_images || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/hardware-bridge
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.platform }},enable={{is_default_branch}}
    
    - name: Build and push Hardware Bridge
      uses: docker/build-push-action@v5
      with:
        context: ./platforms/cpp
        file: ./platforms/cpp/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ inputs.push_images || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ matrix.platform }}
          TARGETPLATFORM=${{ matrix.platform }}
          GPIO_MODE=simulation
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # AI SECURITY MODULE MULTI-PLATFORM BUILD
  # =============================================================================
  build-ai-security:
    name: Build AI Security Module (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.push_images || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-security
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ matrix.platform }},enable={{is_default_branch}}
    
    - name: Build and push AI Security Module
      uses: docker/build-push-action@v5
      with:
        context: ./modules/ai-security
        file: ./modules/ai-security/Dockerfile
        platforms: ${{ matrix.platform }}
        push: ${{ inputs.push_images || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDPLATFORM=${{ matrix.platform }}
          TARGETPLATFORM=${{ matrix.platform }}
          OPENCV_VERSION=4.9.0
          ENABLE_ANPR=true
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # EDGE DEPLOYMENT IMAGES
  # =============================================================================
  build-edge-images:
    name: Build Edge Deployment Images
    runs-on: ubuntu-latest
    needs: [build-core-orchestrator, build-ai-audio-assistant, build-hardware-bridge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: ${{ inputs.push_images || github.event_name == 'push' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-deployment
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build edge deployment image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.edge
        platforms: linux/arm64,linux/arm/v7
        push: ${{ inputs.push_images || github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # DOCKER MANIFEST CREATION
  # =============================================================================
  create-manifests:
    name: Create Multi-Platform Manifests
    runs-on: ubuntu-latest
    needs: [build-core-orchestrator, build-ai-audio-assistant, build-hardware-bridge, build-ai-security, build-edge-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create and push manifests
      run: |
        # Create manifests for each service
        services=("core-orchestrator" "ai-audio-assistant" "hardware-bridge" "ai-security" "edge-deployment")
        
        for service in "${services[@]}"; do
          echo "Creating manifest for $service"
          
          # Create manifest
          docker manifest create \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:latest \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:linux-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:linux-arm64
          
          # Push manifest
          docker manifest push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service:latest
          
          echo "Manifest created and pushed for $service"
        done

  # =============================================================================
  # IMAGE VULNERABILITY SCANNING
  # =============================================================================
  scan-images:
    name: Scan Built Images
    runs-on: ubuntu-latest
    needs: [build-core-orchestrator, build-ai-audio-assistant, build-hardware-bridge, build-ai-security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/core-orchestrator:latest'
        format: 'sarif'
        output: 'trivy-core-results.sarif'
    
    - name: Run Trivy on AI Audio Assistant
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-audio-assistant:latest'
        format: 'sarif'
        output: 'trivy-audio-results.sarif'
    
    - name: Run Trivy on Hardware Bridge
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/hardware-bridge:latest'
        format: 'sarif'
        output: 'trivy-hardware-results.sarif'
    
    - name: Run Trivy on AI Security
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-security:latest'
        format: 'sarif'
        output: 'trivy-security-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: |
          trivy-core-results.sarif
          trivy-audio-results.sarif
          trivy-hardware-results.sarif
          trivy-security-results.sarif

  # =============================================================================
  # EDGE DEPLOYMENT TESTING
  # =============================================================================
  test-edge-deployment:
    name: Test Edge Deployment
    runs-on: ubuntu-latest
    needs: [build-edge-images]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up QEMU for ARM emulation
      run: |
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    
    - name: Test edge deployment image
      run: |
        # Pull and test the edge deployment image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-deployment:latest
        
        # Test basic functionality
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-deployment:latest \
          python -c "print('Edge deployment test successful')"
        
        # Test ARM64 compatibility
        docker run --rm --platform linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/edge-deployment:latest \
          python -c "import platform; print(f'Platform: {platform.machine()}')"
    
    - name: Test Raspberry Pi simulation
      run: |
        # Start Raspberry Pi simulation environment
        docker-compose -f docker-compose.pi-simulation.yml up -d
        sleep 30
        
        # Test GPIO simulation
        docker exec ai-servis-gpio-simulator python -c "
        import gpiozero
        print('GPIO simulation test successful')
        "
        
        # Test MQTT communication
        docker exec ai-servis-mosquitto mosquitto_pub -h localhost -t test/topic -m "test message"
        
        echo "Raspberry Pi simulation test completed"

  # =============================================================================
  # DEPLOYMENT NOTIFICATION
  # =============================================================================
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [create-manifests, scan-images, test-edge-deployment]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.DEPLOYMENT_SLACK_WEBHOOK }}
        custom_payload: |
          {
            "text": "🐳 Multi-Platform Docker Build Complete",
            "attachments": [{
              "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
              "fields": [{
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "Branch",
                "value": "${{ github.ref_name }}",
                "short": true
              }, {
                "title": "Status",
                "value": "${{ job.status }}",
                "short": true
              }, {
                "title": "Registry",
                "value": "${{ env.REGISTRY }}",
                "short": true
              }]
            }]
          }
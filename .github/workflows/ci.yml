name: AI-SERVIS Universal CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  # =============================================================================
  # SECURITY & COMPLIANCE
  # =============================================================================
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, cpp, javascript
        queries: security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python,cpp,javascript"
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --file=requirements.txt
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ai-servis-universal'
        path: '.'
        format: 'SARIF'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --out reports/
    
    - name: Upload OWASP results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'reports/dependency-check-report.sarif'

  # =============================================================================
  # CODE QUALITY & LINTING
  # =============================================================================
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install pre-commit
    
    - name: Run pre-commit hooks
      run: pre-commit run --all-files
    
    - name: Run Python linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check .
        isort --check-only .
    
    - name: Run C++ linting
      run: |
        # Install cppcheck
        sudo apt-get update
        sudo apt-get install -y cppcheck
        
        # Run cppcheck on C++ code
        find platforms/cpp -name "*.cpp" -o -name "*.h" | xargs cppcheck --enable=all --error-exitcode=1
    
    - name: Run JavaScript/TypeScript linting
      run: |
        if [ -f "package.json" ]; then
          npm ci
          npm run lint
        fi

  # =============================================================================
  # BUILD & TEST MATRIX
  # =============================================================================
  build-test:
    name: Build & Test (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    needs: [security-scan, code-quality]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Python components
          - platform: python-linux
            runner: ubuntu-latest
            component: python
          - platform: python-windows
            runner: windows-latest
            component: python
          - platform: python-macos
            runner: macos-latest
            component: python
          
          # C++ components
          - platform: cpp-linux-amd64
            runner: ubuntu-latest
            component: cpp
            arch: x86_64
            profile: linux-release
          - platform: cpp-linux-arm64
            runner: ubuntu-latest
            component: cpp
            arch: arm64
            profile: linux-arm64
          - platform: cpp-windows
            runner: windows-latest
            component: cpp
            arch: x86_64
            profile: windows-release
          - platform: cpp-macos
            runner: macos-latest
            component: cpp
            arch: x86_64
            profile: macos-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      if: matrix.component == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Java
      if: matrix.component == 'android'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Install Conan
      if: matrix.component == 'cpp'
      run: |
        pip install conan
        conan profile detect --force
    
    - name: Cache Conan packages
      if: matrix.component == 'cpp'
      uses: actions/cache@v3
      with:
        path: ~/.conan
        key: ${{ runner.os }}-conan-${{ matrix.arch }}-${{ hashFiles('conanfile.py', 'profiles/${{ matrix.profile }}') }}
        restore-keys: |
          ${{ runner.os }}-conan-${{ matrix.arch }}-
    
    - name: Cache Python packages
      if: matrix.component == 'python'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        if [ "${{ matrix.component }}" = "python" ]; then
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
        elif [ "${{ matrix.component }}" = "cpp" ]; then
          cd platforms/cpp
          conan install ../.. --profile ../../profiles/${{ matrix.profile }} --build missing
        fi
    
    - name: Build component
      run: |
        if [ "${{ matrix.component }}" = "python" ]; then
          python -m pytest tests/ --cov=. --cov-report=xml
        elif [ "${{ matrix.component }}" = "cpp" ]; then
          cd platforms/cpp
          cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release
          cmake --build build -j$(nproc)
        fi
    
    - name: Run tests
      if: ${{ !inputs.skip_tests }}
      run: |
        if [ "${{ matrix.component }}" = "python" ]; then
          python -m pytest tests/ -v --tb=short
        elif [ "${{ matrix.component }}" = "cpp" ]; then
          cd platforms/cpp/build
          ctest --output-on-failure
        fi
    
    - name: Upload coverage reports
      if: matrix.component == 'python'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: ${{ matrix.platform }}
        name: codecov-umbrella

  # =============================================================================
  # ANDROID BUILD
  # =============================================================================
  android-build:
    name: Android Build & Test
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Android SDK
      uses: android-actions/setup-android@v3
    
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x android/gradlew
    
    - name: Build with Gradle
      run: |
        cd android
        ./gradlew assembleDebug
        ./gradlew test
        ./gradlew connectedAndroidTest
    
    - name: Upload debug APK
      uses: actions/upload-artifact@v3
      with:
        name: ai-servis-app-debug
        path: android/app/build/outputs/apk/debug/app-debug.apk

  # =============================================================================
  # ESP32 FIRMWARE BUILD
  # =============================================================================
  esp32-build:
    name: ESP32 Firmware Build
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    strategy:
      matrix:
        target: [esp32, esp32s3]
        variant: [obd, io, cam]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup ESP-IDF
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp-idf-version: v5.0
        target: ${{ matrix.target }}
    
    - name: Build firmware
      run: |
        cd esp32/firmware-${{ matrix.variant }}
        idf.py set-target ${{ matrix.target }}
        idf.py build
    
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v3
      with:
        name: esp32-${{ matrix.target }}-${{ matrix.variant }}
        path: esp32/firmware-${{ matrix.variant }}/build/

  # =============================================================================
  # DOCKER MULTI-PLATFORM BUILD
  # =============================================================================
  docker-build:
    name: Multi-Platform Docker Build
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # =============================================================================
  # ORCHESTRATOR INTEGRATION TEST
  # =============================================================================
  orchestrator-test:
    name: Orchestrator Integration Test
    runs-on: ubuntu-latest
    needs: [build-test, docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Test build orchestrator
      run: |
        python build_orchestrator.py orchestrator-config.yaml --parallel
    
    - name: Test orchestrator configuration
      run: |
        python -c "
        import yaml
        with open('orchestrator-config.yaml') as f:
            config = yaml.safe_load(f)
        print('Configuration validation passed')
        print(f'Components: {len(config.get(\"components\", []))}')
        "

  # =============================================================================
  # PERFORMANCE TESTING
  # =============================================================================
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: [orchestrator-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance tests
      run: |
        # Start services in background
        docker-compose -f docker-compose.dev.yml up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Run performance tests
        python -m pytest tests/performance/ -v --benchmark-only
        
        # Run load tests with Locust
        locust -f tests/load/locustfile.py --headless -u 100 -r 10 -t 60s --html performance-report.html
    
    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # =============================================================================
  # DEPLOYMENT
  # =============================================================================
  deploy:
    name: Deploy to ${{ inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [orchestrator-test, performance-test]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    environment: ${{ inputs.environment || 'staging' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install ansible kubernetes
    
    - name: Deploy to staging
      if: (inputs.environment || 'staging') == 'staging'
      run: |
        # Deploy to staging environment
        ansible-playbook -i inventory/staging deploy.yml
        python build_orchestrator.py orchestrator-config.yaml --deploy
    
    - name: Deploy to production
      if: (inputs.environment || 'staging') == 'production'
      run: |
        # Deploy to production environment
        ansible-playbook -i inventory/production deploy.yml
        python build_orchestrator.py orchestrator-config.yaml --deploy --production
    
    - name: Run smoke tests
      run: |
        # Run smoke tests after deployment
        python tests/smoke/test_deployment.py --environment ${{ inputs.environment || 'staging' }}

  # =============================================================================
  # NOTIFICATIONS
  # =============================================================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ai-servis-ci'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
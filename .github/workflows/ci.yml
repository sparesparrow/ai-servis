name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * 1'  # Weekly security scan on Mondays

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install pytest pytest-cov black flake8 mypy safety bandit

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Type checking with mypy
      run: |
        mypy modules/ --ignore-missing-imports || true

    - name: Security check with bandit
      run: |
        bandit -r modules/ -f json -o bandit-report.json || true

    - name: Dependency security check with safety
      run: |
        safety check || true

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/0
        MQTT_BROKER: localhost:1883
      run: |
        pytest tests/ -v --cov=modules --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-cpp:
    needs: lint-and-test
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - { runner: ubuntu-latest, arch: x86_64, profile: linux-release, conan_arch: x86_64, platform: linux/amd64 }
          - { runner: ubuntu-20.04, arch: arm64, profile: linux-arm64, conan_arch: armv8, platform: linux/arm64 }
          - { runner: macos-latest, arch: x86_64, profile: macos-release, conan_arch: x86_64, platform: darwin/amd64 }
          - { runner: windows-latest, arch: x86_64, profile: windows-release, conan_arch: x86_64, platform: windows/amd64 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Conan
        run: |
          pip install conan
          conan profile detect --force

      - name: Cache Conan packages
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-conan-${{ matrix.arch }}-${{ hashFiles('conanfile.py', 'profiles/${{ matrix.profile }}') }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.arch }}-

      - name: Install dependencies with Conan
        run: |
          cd platforms/cpp
          conan install ../.. --profile ../../profiles/${{ matrix.profile }} --build missing

      - name: Configure CMake
        run: |
          cd platforms/cpp
          cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cd platforms/cpp
          cmake --build build --parallel

      - name: Run tests
        run: |
          cd platforms/cpp
          ctest --test-dir build --output-on-failure

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: cpp-${{ matrix.arch }}-binaries
          path: |
            platforms/cpp/build/hardware-server*
            platforms/cpp/build/mcp-server*
            platforms/cpp/build/webgrab-client*
            platforms/cpp/build/webgrab-server*

  build-images:
    needs: [lint-and-test, build-cpp]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [
          'core-orchestrator',
          'ai-audio-assistant',
          'ai-platform-controllers/linux',
          'service-discovery',
          'hardware-bridge'
        ]
        platform: [linux/amd64, linux/arm64]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: ./modules/${{ matrix.component }}
        platforms: ${{ matrix.platform }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-image-results-${{ matrix.component }}.sarif'

    - name: Upload Trivy image scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-image-results-${{ matrix.component }}.sarif'

  integration-tests:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test environment
      run: |
        cp .env.example .env
        echo "ELEVENLABS_API_KEY=test-key" >> .env
        echo "SPOTIFY_CLIENT_ID=test-id" >> .env
        echo "SPOTIFY_CLIENT_SECRET=test-secret" >> .env

    - name: Start test services
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start

    - name: Check service health
      run: |
        ./scripts/health-check.sh

    - name: Run integration tests
      run: |
        docker-compose exec -T ai-servis-core python -m pytest tests/integration/ -v

    - name: Run system tests
      run: |
        ./scripts/system-tests.sh

    - name: Collect logs
      if: failure()
      run: |
        mkdir -p test-logs
        docker-compose logs > test-logs/docker-compose.log
        docker-compose logs ai-servis-core > test-logs/core.log
        docker-compose logs ai-audio-assistant > test-logs/audio.log

    - name: Upload test logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-logs
        path: test-logs/

  security-scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python, cpp, javascript
        queries: security-extended,security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    - name: Run Trivy vulnerability scanner (Filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy FS scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --sarif-file-output=snyk.sarif

    - name: Upload Snyk results
      if: always()
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: snyk.sarif

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'ai-servis'
        path: '.'
        format: 'SARIF'
        out: 'dependency-check-report'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}

    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dependency-check-report/dependency-check-report.sarif

  performance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start performance test environment
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.perf.yml up -d
        sleep 30

    - name: Run performance tests
      run: |
        ./scripts/performance-tests.sh

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [integration-tests, security-scan, performance-tests]
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # In a real implementation, you would deploy to your staging environment
        # This could involve updating Kubernetes deployments, AWS ECS services, etc.

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh staging

  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [integration-tests, security-scan, performance-tests]
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Production deployment logic here

    - name: Run smoke tests
      run: |
        ./scripts/smoke-tests.sh production

    - name: Notify deployment success
      if: success()
      run: |
        echo "Production deployment successful!"
        # Send notifications (Slack, email, etc.)

  cleanup:
    if: always()
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest

    steps:
    - name: Cleanup test artifacts
      run: |
        echo "Cleaning up test artifacts..."
        # Cleanup logic here

name: Build and Deploy Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after build'
        required: false
        default: 'false'
        type: boolean

env:
  CONAN_VERSION: '2.20.1'
  CMAKE_VERSION: '3.28.1'
  DOCKER_REGISTRY: ghcr.io
  CACHE_KEY_PREFIX: ai-servis-v1

jobs:
  # Matrix build for multiple platforms
  build-matrix:
    name: Build ${{ matrix.os }} - ${{ matrix.compiler }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-13, windows-2022]
        compiler: [gcc-13, clang-17]
        build_type: [Release, Debug]
        exclude:
          - os: macos-13
            compiler: gcc-13
          - os: windows-2022
            compiler: gcc-13
        include:
          - os: ubuntu-22.04
            compiler: gcc-13
            cc: gcc-13
            cxx: g++-13
          - os: ubuntu-22.04
            compiler: clang-17
            cc: clang-17
            cxx: clang++-17
          - os: windows-2022
            compiler: msvc
            cc: cl
            cxx: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Conan packages
      uses: actions/cache@v4
      with:
        path: ~/.conan2
        key: ${{ env.CACHE_KEY_PREFIX }}-conan-${{ matrix.os }}-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.py', '**/conanfile.txt') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-conan-${{ matrix.os }}-${{ matrix.compiler }}-
          ${{ env.CACHE_KEY_PREFIX }}-conan-${{ matrix.os }}-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          libgpiod-dev \
          libmosquitto-dev \
          protobuf-compiler \
          libprotobuf-dev \
          libgrpc++-dev \
          libssl-dev \
          libcurl4-openssl-dev

        if [ "${{ matrix.compiler }}" == "gcc-13" ]; then
          sudo apt-get install -y gcc-13 g++-13
        elif [ "${{ matrix.compiler }}" == "clang-17" ]; then
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 17
        fi

    - name: Install Conan
      run: |
        pip install conan==${{ env.CONAN_VERSION }}
        conan profile detect --force

    - name: Configure Conan profile
      run: |
        conan profile show

    - name: Build with Orchestrator
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
      run: |
        python build_orchestrator.py orchestrator-config.yaml \
          --parallel \
          --report build-report-${{ matrix.os }}-${{ matrix.compiler }}.txt

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure --parallel 4

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.build_type }}
        path: |
          build/bin/
          build/lib/
          build-report-*.txt

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.compiler }}
        path: build/Testing/

  # Build Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: build-matrix
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        component:
          - core-orchestrator
          - ai-audio-assistant
          - hardware-bridge
          - ai-security

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-ubuntu-22.04-gcc-13-Release
        path: build-artifacts/

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: modules/${{ matrix.component }}/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:${{ github.sha }}
        cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:buildcache
        cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.component }}:buildcache,mode=max

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build

    services:
      mosquitto:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        options: >-
          --health-cmd "mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install test dependencies
      run: |
        pip install pytest pytest-asyncio pytest-cov pytest-timeout
        pip install -r requirements-test.txt

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start
        pytest tests/integration/ \
          --cov=modules \
          --cov-report=xml \
          --cov-report=term \
          --timeout=60

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.xml
        flags: integration
        name: integration-tests

  # Deploy to staging/production
  deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    needs: [build-matrix, docker-build, integration-test]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')

    strategy:
      matrix:
        environment: [staging, production]
        exclude:
          - environment: production
            if: ${{ !startsWith(github.ref, 'refs/tags/v') }}

    environment: ${{ matrix.environment }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.29.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy with Helm
      run: |
        helm upgrade --install ai-servis ./deploy/helm \
          --namespace ai-servis-${{ matrix.environment }} \
          --create-namespace \
          --set image.tag=${{ github.sha }} \
          --set environment=${{ matrix.environment }} \
          --values ./deploy/helm/values-${{ matrix.environment }}.yaml \
          --wait \
          --timeout 10m

    - name: Run smoke tests
      run: |
        kubectl run smoke-test \
          --image=curlimages/curl:latest \
          --rm \
          --attach \
          --restart=Never \
          -- curl http://ai-servis-core:8080/health

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Deployment to ${{ matrix.environment }} ${{ job.status }}'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-matrix, docker-build, integration-test]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release packages
      run: |
        for dir in build-*; do
          if [ -d "$dir" ]; then
            tar czf "${dir}.tar.gz" "$dir"
          fi
        done

    - name: Generate release notes
      run: |
        echo "# Release ${{ github.ref_name }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## Changes" >> RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          build-*.tar.gz
          RELEASE_NOTES.md
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}

    - name: Upload to Conan repository
      run: |
        conan remote add artifactory ${{ secrets.CONAN_REPO_URL }}
        conan user -p ${{ secrets.CONAN_PASSWORD }} -r artifactory ${{ secrets.CONAN_USER }}
        conan upload "*" -r artifactory --all --confirm

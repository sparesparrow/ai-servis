version: '3.8'

services:
  # Core Services
  core-orchestrator:
    build:
      context: .
      dockerfile: modules/core-orchestrator/Dockerfile
    container_name: ai-servis-core
    environment:
      - CONFIG_FILE=/app/config/config.json
      - LOG_LEVEL=INFO
      - MQTT_BROKER=mqtt-broker
      - REDIS_HOST=redis
      - POSTGRES_HOST=postgres
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      - mqtt-broker
      - redis
      - postgres
    networks:
      - ai-servis-network
    restart: unless-stopped

  # Audio Assistant
  audio-assistant:
    build:
      context: .
      dockerfile: modules/ai-audio-assistant/Dockerfile
    container_name: ai-servis-audio
    environment:
      - CONFIG_FILE=/app/config/config.json
      - LOG_LEVEL=INFO
      - MQTT_BROKER=mqtt-broker
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data/audio:/app/data/audio
      - /dev/snd:/dev/snd  # Audio device access
    devices:
      - /dev/snd:/dev/snd
    ports:
      - "8001:8001"
    depends_on:
      - mqtt-broker
    networks:
      - ai-servis-network
    restart: unless-stopped
    privileged: true  # Required for audio device access

  # Communications
  communications:
    build:
      context: .
      dockerfile: modules/ai-communications/Dockerfile
    container_name: ai-servis-communications
    environment:
      - CONFIG_FILE=/app/config/config.json
      - LOG_LEVEL=INFO
      - MQTT_BROKER=mqtt-broker
      - REDIS_HOST=redis
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data/communications:/app/data/communications
    ports:
      - "8002:8002"
    depends_on:
      - mqtt-broker
      - redis
    networks:
      - ai-servis-network
    restart: unless-stopped

  # Platform Controllers
  platform-controller-linux:
    build:
      context: .
      dockerfile: modules/ai-platform-controllers/linux/Dockerfile
    container_name: ai-servis-platform-linux
    environment:
      - CONFIG_FILE=/app/config/config.json
      - LOG_LEVEL=INFO
      - MQTT_BROKER=mqtt-broker
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - /:/host:ro  # Read-only access to host system
    ports:
      - "8003:8003"
    depends_on:
      - mqtt-broker
    networks:
      - ai-servis-network
    restart: unless-stopped
    privileged: true  # Required for system operations

  # Service Discovery
  service-discovery:
    build:
      context: .
      dockerfile: modules/service-discovery/Dockerfile
    container_name: ai-servis-discovery
    environment:
      - CONFIG_FILE=/app/config/config.json
      - LOG_LEVEL=INFO
      - MQTT_BROKER=mqtt-broker
      - REDIS_HOST=redis
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    ports:
      - "8004:8004"
    depends_on:
      - mqtt-broker
      - redis
    networks:
      - ai-servis-network
    restart: unless-stopped

  # Infrastructure Services
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: ai-servis-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./containers/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./containers/mosquitto/passwd:/mosquitto/config/passwd:ro
      - ./volumes/mqtt-data:/mosquitto/data
      - ./volumes/mqtt-logs:/mosquitto/log
    networks:
      - ai-servis-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: ai-servis-redis
    ports:
      - "6379:6379"
    volumes:
      - ./volumes/redis-data-dev:/data
    networks:
      - ai-servis-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  postgres:
    image: postgres:15-alpine
    container_name: ai-servis-postgres
    environment:
      - POSTGRES_DB=ai_servis_universal
      - POSTGRES_USER=ai_servis
      - POSTGRES_PASSWORD=ai_servis_password
    ports:
      - "5432:5432"
    volumes:
      - ./volumes/postgres-data-dev:/var/lib/postgresql/data
      - ./containers/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-servis-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-servis-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./containers/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./volumes/prometheus-data:/prometheus
    networks:
      - ai-servis-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ai-servis-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./volumes/grafana-data:/var/lib/grafana
      - ./containers/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - ai-servis-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Development Tools
  nginx:
    image: nginx:alpine
    container_name: ai-servis-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./containers/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./containers/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ai-servis-network
    restart: unless-stopped
    depends_on:
      - core-orchestrator
      - audio-assistant
      - communications

  # Signal Server (for Signal messaging)
  signal-server:
    image: bbernhard/signal-cli-rest-api:latest
    container_name: ai-servis-signal
    ports:
      - "8080:8080"
    environment:
      - SIGNAL_CLI_CONFIG_DIR=/home/.local/share/signal-cli
    volumes:
      - ./volumes/signal-data:/home/.local/share/signal-cli
    networks:
      - ai-servis-network
    restart: unless-stopped

  # GPIO Simulator (for Raspberry Pi simulation)
  gpio-simulator:
    build:
      context: ./containers/gpio-simulator
      dockerfile: Dockerfile
    container_name: ai-servis-gpio-sim
    ports:
      - "8888:8888"
    networks:
      - ai-servis-network
    restart: unless-stopped

  # Pi Simulation Environment
  pi-simulation:
    build:
      context: ./containers/pi-simulation
      dockerfile: Dockerfile
    container_name: ai-servis-pi-sim
    ports:
      - "8889:8889"
    networks:
      - ai-servis-network
    restart: unless-stopped

networks:
  ai-servis-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mqtt-data:
  mqtt-logs:
  redis-data-dev:
  postgres-data-dev:
  prometheus-data:
  grafana-data:
  signal-data:
